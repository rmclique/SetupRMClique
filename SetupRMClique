#!/bin/bash
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
## RM CLIQUE ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

# Cores
amarelo="\e[33m"
verde="\e[32m"
branco="\e[97m"
bege="\e[93m"
vermelho="\e[91m"
reset="\e[0m"

# Variáveis globais
DOMINIO=""
EMAIL=""
SENHA=""
PORTA=""
SUBDOMINIO=""

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
## RM CLIQUE ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

versao() {
echo -e " \e[97mVersão do SetupRMClique: \e[32mv. 1.0.0\e[0m"
echo ""
}

cabecalho() {
clear
echo ""
echo -e "$amarelo===================================================================================================$reset"
echo -e "$amarelo=                                                                                                 $amarelo=$reset"
echo -e "$amarelo= $branco ██████╗ ███╗   ███╗     ██████╗██╗     ██╗ ██╗██╗   ██╗███████╗ $amarelo=$reset"
echo -e "$amarelo= $branco ██╔══██╗████╗ ████║    ██╔════╝██║     ██║ ██║██║   ██║██╔════╝ $amarelo=$reset"
echo -e "$amarelo= $branco ██████╔╝██╔████╔██║    ██║     ██║     ██║ ██║██║   ██║█████╗   $amarelo=$reset"
echo -e "$amarelo= $branco ██╔══██╗██║╚██╔╝██║    ██║     ██║     ██║ ██║╚██╗ ██╔╝██╔══╝   $amarelo=$reset"
echo -e "$amarelo= $branco ██║  ██║██║ ╚═╝ ██║    ╚██████╗███████╗██║ ██║ ╚████╔╝ ███████╗ $amarelo=$reset"
echo -e "$amarelo= $branco ╚═╝  ╚═╝╚═╝     ╚═╝     ╚═════╝╚══════╝╚═╝ ╚═╝  ╚═══╝ ╚══════╝ $amarelo=$reset"
echo -e "$amarelo=                                                                                                 $amarelo=$reset"
echo -e "$amarelo===================================================================================================$reset"
echo ""
echo ""
}

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
## RM CLIQUE ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

# Função para obter informações do usuário
obter_dominio() {
echo -e "$amarelo Digite seu domínio (exemplo: meudominio.com):$reset"
read -p "Domínio: " DOMINIO
echo ""
}

obter_email() {
echo -e "$amarelo Digite seu email para certificados SSL:$reset"
read -p "Email: " EMAIL
echo ""
}

obter_senha() {
echo -e "$amarelo Digite uma senha para o banco de dados:$reset"
read -s -p "Senha: " SENHA
echo ""
echo ""
}

obter_porta() {
echo -e "$amarelo Digite a porta (exemplo: 8080):$reset"
read -p "Porta: " PORTA
echo ""
}

obter_subdominio() {
echo -e "$amarelo Digite o subdomínio (exemplo: vpn):$reset"
read -p "Subdomínio: " SUBDOMINIO
SUBDOMINIO="${SUBDOMINIO}.${DOMINIO}"
echo ""
}

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
## RM CLIQUE ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

# Função para remover Docker e sair do swarm (Opção 79)
remover_docker() {
cabecalho
echo -e "$vermelho ATENÇÃO: Esta operação irá remover completamente o Docker e sair do swarm!$reset"
echo ""
echo -e "$amarelo Deseja continuar? (s/n):$reset"
read -p "Resposta: " confirmacao

if [[ $confirmacao == "s" || $confirmacao == "S" ]]; then
echo ""
echo -e "$amarelo Removendo Docker e saindo do swarm...$reset"
echo ""

# Sair do swarm se estiver em um
docker swarm leave --force 2>/dev/null

# Parar todos os containers
docker stop $(docker ps -aq) 2>/dev/null

# Remover todos os containers
docker rm $(docker ps -aq) 2>/dev/null

# Remover todas as imagens
docker rmi $(docker images -q) 2>/dev/null

# Remover todos os volumes
docker volume rm $(docker volume ls -q) 2>/dev/null

# Remover todas as redes
docker network rm $(docker network ls -q) 2>/dev/null

# Parar o serviço Docker
systemctl stop docker

# Remover o Docker
apt-get remove -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# Remover repositórios Docker
rm -f /etc/apt/sources.list.d/docker.list

# Limpar arquivos Docker
rm -rf /var/lib/docker
rm -rf /etc/docker

echo ""
echo -e "$verde Docker removido com sucesso!$reset"
echo ""
read -p "Pressione Enter para continuar..."
else
echo ""
echo -e "$amarelo Operação cancelada.$reset"
echo ""
read -p "Pressione Enter para continuar..."
fi
}

# Função para instalar Pterodactyl (Opção 80)
instalar_pterodactyl() {
cabecalho
echo -e "$amarelo Instalação do Pterodactyl Panel$reset"
echo ""

# Verificar se Docker está instalado
if ! command -v docker &> /dev/null; then
    echo -e "$vermelho Docker não está instalado! Instalando Docker primeiro...$reset"
    echo ""
    # Instalar Docker
    apt update
    apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt update
    apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    systemctl start docker
    systemctl enable docker
    echo -e "$verde Docker instalado com sucesso!$reset"
    echo ""
fi

# Verificar se Docker Compose está disponível
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    echo -e "$amarelo Instalando Docker Compose...$reset"
    apt install -y docker-compose
    echo -e "$verde Docker Compose instalado!$reset"
    echo ""
fi

# Verificar se Traefik já existe
if docker network ls | grep -q "traefik"; then
    echo -e "$verde Traefik já está configurado! Usando rede existente.$reset"
    TRAEFIK_NETWORK="traefik"
else
    echo -e "$amarelo Criando rede do Traefik...$reset"
    docker network create traefik
    TRAEFIK_NETWORK="traefik"
fi

# Verificar se Portainer já existe
if docker ps -a | grep -q "portainer"; then
    echo -e "$verde Portainer já está instalado!$reset"
else
    echo -e "$amarelo Portainer não encontrado. Será instalado junto com o Pterodactyl.$reset"
fi

obter_dominio
obter_email
obter_senha
obter_subdominio

echo -e "$amarelo Instalando Pterodactyl Panel...$reset"
echo ""

# Criar diretório para o Pterodactyl
mkdir -p /opt/pterodactyl
cd /opt/pterodactyl

# Criar docker-compose.yml para Pterodactyl
cat > docker-compose.yml << EOF
version: '3.8'

services:
  pterodactyl-panel:
    image: ghcr.io/pterodactyl/panel:latest
    container_name: pterodactyl-panel
    restart: unless-stopped
    environment:
      - APP_URL=https://${SUBDOMINIO}.${DOMINIO}
      - DB_HOST=pterodactyl-db
      - DB_PORT=3306
      - DB_DATABASE=pterodactyl
      - DB_USERNAME=pterodactyl
      - DB_PASSWORD=${SENHA}
      - REDIS_HOST=pterodactyl-redis
      - REDIS_PORT=6379
      - MAIL_MAILER=smtp
      - MAIL_HOST=smtp.gmail.com
      - MAIL_PORT=587
      - MAIL_USERNAME=${EMAIL}
      - MAIL_PASSWORD=${SENHA}
      - MAIL_ENCRYPTION=tls
    volumes:
      - pterodactyl-data:/var/www/html
    networks:
      - ${TRAEFIK_NETWORK}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pterodactyl.rule=Host(\`${SUBDOMINIO}.${DOMINIO}\`)"
      - "traefik.http.routers.pterodactyl.tls=true"
      - "traefik.http.routers.pterodactyl.tls.certresolver=letsencrypt"
      - "traefik.http.services.pterodactyl.loadbalancer.server.port=80"

  pterodactyl-db:
    image: mariadb:10.7
    container_name: pterodactyl-db
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${SENHA}
      - MYSQL_DATABASE=pterodactyl
      - MYSQL_USER=pterodactyl
      - MYSQL_PASSWORD=${SENHA}
    volumes:
      - pterodactyl-db-data:/var/lib/mysql
    networks:
      - ${TRAEFIK_NETWORK}

  pterodactyl-redis:
    image: redis:alpine
    container_name: pterodactyl-redis
    restart: unless-stopped
    volumes:
      - pterodactyl-redis-data:/data
    networks:
      - ${TRAEFIK_NETWORK}

volumes:
  pterodactyl-data:
  pterodactyl-db-data:
  pterodactyl-redis-data:

networks:
  ${TRAEFIK_NETWORK}:
    external: true
EOF

# Iniciar o Pterodactyl
echo -e "$amarelo Iniciando containers...$reset"
if command -v docker-compose &> /dev/null; then
    docker-compose up -d
    COMPOSE_EXIT_CODE=$?
else
    docker compose up -d
    COMPOSE_EXIT_CODE=$?
fi

# Verificar se a instalação foi bem-sucedida
if [ $COMPOSE_EXIT_CODE -eq 0 ]; then
    # Aguardar containers iniciarem
    sleep 10
    
    # Verificar se containers estão rodando
    if docker ps | grep -q "pterodactyl-panel" && docker ps | grep -q "pterodactyl-db" && docker ps | grep -q "pterodactyl-redis"; then
        echo ""
        echo -e "$verde Pterodactyl Panel instalado com sucesso!$reset"
        echo -e "$amarelo Acesse: https://${SUBDOMINIO}$reset"
        echo ""
    else
        echo -e "$vermelho Erro: Containers não iniciaram corretamente!$reset"
        echo -e "$amarelo Removendo instalação...$reset"
        docker-compose down -v 2>/dev/null || docker compose down -v 2>/dev/null
        rm -rf /opt/pterodactyl
        echo -e "$vermelho Instalação removida devido a erros.$reset"
    fi
else
    echo -e "$vermelho Erro na instalação do Pterodactyl!$reset"
    echo -e "$amarelo Removendo instalação...$reset"
    docker-compose down -v 2>/dev/null || docker compose down -v 2>/dev/null
    rm -rf /opt/pterodactyl
    echo -e "$vermelho Instalação removida devido a erros.$reset"
fi

echo ""
read -p "Pressione Enter para continuar..."
}

# Função para instalar PufferPanel (Opção 81)
instalar_pufferpanel() {
cabecalho
echo -e "$amarelo Instalação do PufferPanel$reset"
echo ""

# Verificar se Docker está instalado
if ! command -v docker &> /dev/null; then
    echo -e "$vermelho Docker não está instalado! Instalando Docker primeiro...$reset"
    echo ""
    # Instalar Docker
    apt update
    apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt update
    apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    systemctl start docker
    systemctl enable docker
    echo -e "$verde Docker instalado com sucesso!$reset"
    echo ""
fi

# Verificar se Docker Compose está disponível
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    echo -e "$amarelo Instalando Docker Compose...$reset"
    apt install -y docker-compose
    echo -e "$verde Docker Compose instalado!$reset"
    echo ""
fi

# Verificar se Traefik já existe
if docker network ls | grep -q "traefik"; then
    echo -e "$verde Traefik já está configurado! Usando rede existente.$reset"
    TRAEFIK_NETWORK="traefik"
else
    echo -e "$amarelo Criando rede do Traefik...$reset"
    docker network create traefik
    TRAEFIK_NETWORK="traefik"
fi

# Verificar se Portainer já existe
if docker ps -a | grep -q "portainer"; then
    echo -e "$verde Portainer já está instalado!$reset"
else
    echo -e "$amarelo Portainer não encontrado. Será instalado junto com o PufferPanel.$reset"
fi

obter_dominio
obter_email
obter_senha
obter_subdominio

echo -e "$amarelo Instalando PufferPanel...$reset"
echo ""

# Criar diretório para o PufferPanel
mkdir -p /opt/pufferpanel
cd /opt/pufferpanel

# Criar docker-compose.yml para PufferPanel
cat > docker-compose.yml << EOF
version: '3.8'

services:
  pufferpanel:
    image: pufferpanel/pufferpanel:latest
    container_name: pufferpanel
    restart: unless-stopped
    environment:
      - PFP_SERVER_NAME=PufferPanel
      - PFP_SERVER_DESC=PufferPanel Server
      - PFP_SERVER_WEBSITE=https://${SUBDOMINIO}.${DOMINIO}
      - PFP_SERVER_EMAIL=${EMAIL}
      - PFP_DATABASE_HOST=pufferpanel-db
      - PFP_DATABASE_PORT=3306
      - PFP_DATABASE_NAME=pufferpanel
      - PFP_DATABASE_USER=pufferpanel
      - PFP_DATABASE_PASS=${SENHA}
      - PFP_REDIS_HOST=pufferpanel-redis
      - PFP_REDIS_PORT=6379
    volumes:
      - pufferpanel-data:/srv
    networks:
      - ${TRAEFIK_NETWORK}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pufferpanel.rule=Host(\`${SUBDOMINIO}.${DOMINIO}\`)"
      - "traefik.http.routers.pufferpanel.tls=true"
      - "traefik.http.routers.pufferpanel.tls.certresolver=letsencrypt"
      - "traefik.http.services.pufferpanel.loadbalancer.server.port=8080"

  pufferpanel-db:
    image: mariadb:10.7
    container_name: pufferpanel-db
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${SENHA}
      - MYSQL_DATABASE=pufferpanel
      - MYSQL_USER=pufferpanel
      - MYSQL_PASSWORD=${SENHA}
    volumes:
      - pufferpanel-db-data:/var/lib/mysql
    networks:
      - ${TRAEFIK_NETWORK}

  pufferpanel-redis:
    image: redis:alpine
    container_name: pufferpanel-redis
    restart: unless-stopped
    volumes:
      - pufferpanel-redis-data:/data
    networks:
      - ${TRAEFIK_NETWORK}

volumes:
  pufferpanel-data:
  pufferpanel-db-data:
  pufferpanel-redis-data:

networks:
  ${TRAEFIK_NETWORK}:
    external: true
EOF

# Iniciar o PufferPanel
echo -e "$amarelo Iniciando containers...$reset"
if command -v docker-compose &> /dev/null; then
    docker-compose up -d
    COMPOSE_EXIT_CODE=$?
else
    docker compose up -d
    COMPOSE_EXIT_CODE=$?
fi

# Verificar se a instalação foi bem-sucedida
if [ $COMPOSE_EXIT_CODE -eq 0 ]; then
    # Aguardar containers iniciarem
    sleep 10
    
    # Verificar se containers estão rodando
    if docker ps | grep -q "pufferpanel" && docker ps | grep -q "pufferpanel-db" && docker ps | grep -q "pufferpanel-redis"; then
        echo ""
        echo -e "$verde PufferPanel instalado com sucesso!$reset"
        echo -e "$amarelo Acesse: https://${SUBDOMINIO}$reset"
        echo ""
    else
        echo -e "$vermelho Erro: Containers não iniciaram corretamente!$reset"
        echo -e "$amarelo Removendo instalação...$reset"
        docker-compose down -v 2>/dev/null || docker compose down -v 2>/dev/null
        rm -rf /opt/pufferpanel
        echo -e "$vermelho Instalação removida devido a erros.$reset"
    fi
else
    echo -e "$vermelho Erro na instalação do PufferPanel!$reset"
    echo -e "$amarelo Removendo instalação...$reset"
    docker-compose down -v 2>/dev/null || docker compose down -v 2>/dev/null
    rm -rf /opt/pufferpanel
    echo -e "$vermelho Instalação removida devido a erros.$reset"
fi

echo ""
read -p "Pressione Enter para continuar..."
}

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
## RM CLIQUE ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

# Menu principal
menu_principal() {
while true; do
cabecalho
versao
echo -e "$branco Escolha uma opção:$reset"
echo ""
echo -e "$verde [1]$reset - Instalar Docker"
echo -e "$verde [2]$reset - Instalar Docker Compose"
echo -e "$verde [3]$reset - Instalar Traefik"
echo -e "$verde [4]$reset - Instalar Nginx"
echo -e "$verde [5]$reset - Instalar Apache"
echo -e "$verde [6]$reset - Instalar MySQL"
echo -e "$verde [7]$reset - Instalar PostgreSQL"
echo -e "$verde [8]$reset - Instalar Redis"
echo -e "$verde [9]$reset - Instalar MongoDB"
echo -e "$verde [10]$reset - Instalar Node.js"
echo -e "$verde [11]$reset - Instalar Python"
echo -e "$verde [12]$reset - Instalar PHP"
echo -e "$verde [13]$reset - Instalar Java"
echo -e "$verde [14]$reset - Instalar Go"
echo -e "$verde [15]$reset - Instalar Rust"
echo -e "$verde [16]$reset - Instalar Git"
echo -e "$verde [17]$reset - Instalar Curl"
echo -e "$verde [18]$reset - Instalar Wget"
echo -e "$verde [19]$reset - Instalar Vim"
echo -e "$verde [20]$reset - Instalar Nano"
echo -e "$verde [21]$reset - Instalar Htop"
echo -e "$verde [22]$reset - Instalar Neofetch"
echo -e "$verde [23]$reset - Instalar Unzip"
echo -e "$verde [24]$reset - Instalar Zip"
echo -e "$verde [25]$reset - Instalar 7zip"
echo -e "$verde [26]$reset - Instalar FFmpeg"
echo -e "$verde [27]$reset - Instalar ImageMagick"
echo -e "$verde [28]$reset - Instalar JQ"
echo -e "$verde [29]$reset - Instalar YQ"
echo -e "$verde [30]$reset - Instalar HTTPie"
echo -e "$verde [31]$reset - Instalar Tmux"
echo -e "$verde [32]$reset - Instalar Screen"
echo -e "$verde [33]$reset - Instalar SSH"
echo -e "$verde [34]$reset - Instalar FTP"
echo -e "$verde [35]$reset - Instalar SFTP"
echo -e "$verde [36]$reset - Instalar Rsync"
echo -e "$verde [37]$reset - Instalar Cron"
echo -e "$verde [38]$reset - Instalar Logrotate"
echo -e "$verde [39]$reset - Instalar Fail2ban"
echo -e "$verde [40]$reset - Instalar UFW"
echo -e "$verde [41]$reset - Instalar Iptables"
echo -e "$verde [42]$reset - Instalar OpenSSL"
echo -e "$verde [43]$reset - Instalar Certbot"
echo -e "$verde [44]$reset - Instalar Let's Encrypt"
echo -e "$verde [45]$reset - Instalar Cloudflare"
echo -e "$verde [46]$reset - Instalar AWS CLI"
echo -e "$verde [47]$reset - Instalar Azure CLI"
echo -e "$verde [48]$reset - Instalar Google Cloud CLI"
echo -e "$verde [49]$reset - Instalar DigitalOcean CLI"
echo -e "$verde [50]$reset - Instalar Linode CLI"
echo -e "$verde [51]$reset - Instalar Vultr CLI"
echo -e "$verde [52]$reset - Instalar Heroku CLI"
echo -e "$verde [53]$reset - Instalar Netlify CLI"
echo -e "$verde [54]$reset - Instalar Vercel CLI"
echo -e "$verde [55]$reset - Instalar Surge CLI"
echo -e "$verde [56]$reset - Instalar Now CLI"
echo -e "$verde [57]$reset - Instalar Zeit CLI"
echo -e "$verde [58]$reset - Instalar Firebase CLI"
echo -e "$verde [59]$reset - Instalar Supabase CLI"
echo -e "$verde [60]$reset - Instalar PlanetScale CLI"
echo -e "$verde [61]$reset - Instalar Railway CLI"
echo -e "$verde [62]$reset - Instalar Render CLI"
echo -e "$verde [63]$reset - Instalar Fly.io CLI"
echo -e "$verde [64]$reset - Instalar DigitalOcean App Platform CLI"
echo -e "$verde [65]$reset - Instalar AWS Amplify CLI"
echo -e "$verde [66]$reset - Instalar AWS SAM CLI"
echo -e "$verde [67]$reset - Instalar AWS CDK CLI"
echo -e "$verde [68]$reset - Instalar Terraform"
echo -e "$verde [69]$reset - Instalar Ansible"
echo -e "$verde [70]$reset - Instalar Vagrant"
echo -e "$verde [71]$reset - Instalar VirtualBox"
echo -e "$verde [72]$reset - Instalar VMware"
echo -e "$verde [73]$reset - Instalar QEMU"
echo -e "$verde [74]$reset - Instalar KVM"
echo -e "$verde [75]$reset - Instalar Docker Swarm"
echo -e "$verde [76]$reset - Instalar Kubernetes"
echo -e "$verde [77]$reset - Instalar Helm"
echo -e "$verde [78]$reset - Instalar Istio"
echo -e "$vermelho [79]$reset - Remover Docker e sair do swarm"
echo -e "$amarelo [80]$reset - Instalar Pterodactyl Panel"
echo -e "$amarelo [81]$reset - Instalar PufferPanel"
echo -e "$verde [82]$reset - Atualizar sistema"
echo -e "$verde [83]$reset - Limpar sistema"
echo -e "$verde [84]$reset - Reiniciar sistema"
echo -e "$verde [85]$reset - Desligar sistema"
echo -e "$amarelo [87]$reset - Instalar WireGuard VPN"
echo -e "$verde [88]$reset - Sair"
echo ""
echo -e "$amarelo Digite o número da opção desejada:$reset"
read -p "Opção: " opcao

case $opcao in
1) instalar_docker ;;
2) instalar_docker_compose ;;
3) instalar_traefik ;;
4) instalar_nginx ;;
5) instalar_apache ;;
6) instalar_mysql ;;
7) instalar_postgresql ;;
8) instalar_redis ;;
9) instalar_mongodb ;;
10) instalar_nodejs ;;
11) instalar_python ;;
12) instalar_php ;;
13) instalar_java ;;
14) instalar_go ;;
15) instalar_rust ;;
16) instalar_git ;;
17) instalar_curl ;;
18) instalar_wget ;;
19) instalar_vim ;;
20) instalar_nano ;;
21) instalar_htop ;;
22) instalar_neofetch ;;
23) instalar_unzip ;;
24) instalar_zip ;;
25) instalar_7zip ;;
26) instalar_ffmpeg ;;
27) instalar_imagemagick ;;
28) instalar_jq ;;
29) instalar_yq ;;
30) instalar_httpie ;;
31) instalar_tmux ;;
32) instalar_screen ;;
33) instalar_ssh ;;
34) instalar_ftp ;;
35) instalar_sftp ;;
36) instalar_rsync ;;
37) instalar_cron ;;
38) instalar_logrotate ;;
39) instalar_fail2ban ;;
40) instalar_ufw ;;
41) instalar_iptables ;;
42) instalar_openssl ;;
43) instalar_certbot ;;
44) instalar_letsencrypt ;;
45) instalar_cloudflare ;;
46) instalar_aws_cli ;;
47) instalar_azure_cli ;;
48) instalar_google_cloud_cli ;;
49) instalar_digitalocean_cli ;;
50) instalar_linode_cli ;;
51) instalar_vultr_cli ;;
52) instalar_heroku_cli ;;
53) instalar_netlify_cli ;;
54) instalar_vercel_cli ;;
55) instalar_surge_cli ;;
56) instalar_now_cli ;;
57) instalar_zeit_cli ;;
58) instalar_firebase_cli ;;
59) instalar_supabase_cli ;;
60) instalar_planetscale_cli ;;
61) instalar_railway_cli ;;
62) instalar_render_cli ;;
63) instalar_flyio_cli ;;
64) instalar_digitalocean_app_platform_cli ;;
65) instalar_aws_amplify_cli ;;
66) instalar_aws_sam_cli ;;
67) instalar_aws_cdk_cli ;;
68) instalar_terraform ;;
69) instalar_ansible ;;
70) instalar_vagrant ;;
71) instalar_virtualbox ;;
72) instalar_vmware ;;
73) instalar_qemu ;;
74) instalar_kvm ;;
75) instalar_docker_swarm ;;
76) instalar_kubernetes ;;
77) instalar_helm ;;
78) instalar_istio ;;
79) remover_docker ;;
80) instalar_pterodactyl ;;
81) instalar_pufferpanel ;;
82) atualizar_sistema ;;
83) limpar_sistema ;;
84) reiniciar_sistema ;;
85) desligar_sistema ;;
87) instalar_wireguard ;;
88) sair ;;
*) echo -e "$vermelho Opção inválida!$reset"; sleep 2 ;;
esac
done
}


## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
## RM CLIQUE ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

# Funções de instalação (copiadas do Orion Design)
instalar_docker() {
echo -e "$amarelo Instalando Docker...$reset"
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
systemctl start docker
systemctl enable docker
usermod -aG docker $USER
rm get-docker.sh
echo -e "$verde Docker instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_docker_compose() {
echo -e "$amarelo Instalando Docker Compose...$reset"
curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
echo -e "$verde Docker Compose instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_traefik() {
echo -e "$amarelo Instalando Traefik...$reset"
docker network create traefik
mkdir -p /opt/traefik
cd /opt/traefik
cat > docker-compose.yml << 'EOF'
version: '3.8'
services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/traefik.yml:ro
      - ./acme.json:/acme.json
    networks:
      - traefik
networks:
  traefik:
    external: true
EOF
cat > traefik.yml << 'EOF'
api:
  dashboard: true
entryPoints:
  web:
    address: ":80"
  websecure:
    address: ":443"
providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false
  file:
    filename: /traefik.yml
certificatesResolvers:
  letsencrypt:
    acme:
      email: admin@example.com
      storage: /acme.json
      httpChallenge:
        entryPoint: web
EOF
touch acme.json
chmod 600 acme.json
docker-compose up -d
echo -e "$verde Traefik instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_nginx() {
echo -e "$amarelo Instalando Nginx...$reset"
apt update
apt install -y nginx
systemctl start nginx
systemctl enable nginx
echo -e "$verde Nginx instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_apache() {
echo -e "$amarelo Instalando Apache...$reset"
apt update
apt install -y apache2
systemctl start apache2
systemctl enable apache2
echo -e "$verde Apache instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_mysql() {
echo -e "$amarelo Instalando MySQL...$reset"
apt update
apt install -y mysql-server
systemctl start mysql
systemctl enable mysql
mysql_secure_installation
echo -e "$verde MySQL instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_postgresql() {
echo -e "$amarelo Instalando PostgreSQL...$reset"
apt update
apt install -y postgresql postgresql-contrib
systemctl start postgresql
systemctl enable postgresql
echo -e "$verde PostgreSQL instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_redis() {
echo -e "$amarelo Instalando Redis...$reset"
apt update
apt install -y redis-server
systemctl start redis-server
systemctl enable redis-server
echo -e "$verde Redis instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_mongodb() {
echo -e "$amarelo Instalando MongoDB...$reset"
wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | apt-key add -
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-6.0.list
apt update
apt install -y mongodb-org
systemctl start mongod
systemctl enable mongod
echo -e "$verde MongoDB instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_nodejs() {
echo -e "$amarelo Instalando Node.js...$reset"
curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
apt install -y nodejs
echo -e "$verde Node.js instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_python() {
echo -e "$amarelo Instalando Python...$reset"
apt update
apt install -y python3 python3-pip python3-venv
echo -e "$verde Python instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_php() {
echo -e "$amarelo Instalando PHP...$reset"
apt update
apt install -y php php-cli php-fpm php-mysql php-xml php-gd php-curl php-mbstring php-zip
echo -e "$verde PHP instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_java() {
echo -e "$amarelo Instalando Java...$reset"
apt update
apt install -y openjdk-11-jdk
echo -e "$verde Java instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_go() {
echo -e "$amarelo Instalando Go...$reset"
wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
source ~/.bashrc
rm go1.21.0.linux-amd64.tar.gz
echo -e "$verde Go instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_rust() {
echo -e "$amarelo Instalando Rust...$reset"
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
source ~/.cargo/env
echo -e "$verde Rust instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_git() {
echo -e "$amarelo Instalando Git...$reset"
apt update
apt install -y git
echo -e "$verde Git instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_curl() {
echo -e "$amarelo Instalando Curl...$reset"
apt update
apt install -y curl
echo -e "$verde Curl instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_wget() {
echo -e "$amarelo Instalando Wget...$reset"
apt update
apt install -y wget
echo -e "$verde Wget instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_vim() {
echo -e "$amarelo Instalando Vim...$reset"
apt update
apt install -y vim
echo -e "$verde Vim instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_nano() {
echo -e "$amarelo Instalando Nano...$reset"
apt update
apt install -y nano
echo -e "$verde Nano instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_htop() {
echo -e "$amarelo Instalando Htop...$reset"
apt update
apt install -y htop
echo -e "$verde Htop instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_neofetch() {
echo -e "$amarelo Instalando Neofetch...$reset"
apt update
apt install -y neofetch
echo -e "$verde Neofetch instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_unzip() {
echo -e "$amarelo Instalando Unzip...$reset"
apt update
apt install -y unzip
echo -e "$verde Unzip instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_zip() {
echo -e "$amarelo Instalando Zip...$reset"
apt update
apt install -y zip
echo -e "$verde Zip instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_7zip() {
echo -e "$amarelo Instalando 7zip...$reset"
apt update
apt install -y p7zip-full
echo -e "$verde 7zip instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_ffmpeg() {
echo -e "$amarelo Instalando FFmpeg...$reset"
apt update
apt install -y ffmpeg
echo -e "$verde FFmpeg instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_imagemagick() {
echo -e "$amarelo Instalando ImageMagick...$reset"
apt update
apt install -y imagemagick
echo -e "$verde ImageMagick instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_jq() {
echo -e "$amarelo Instalando JQ...$reset"
apt update
apt install -y jq
echo -e "$verde JQ instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_yq() {
echo -e "$amarelo Instalando YQ...$reset"
wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
chmod +x /usr/bin/yq
echo -e "$verde YQ instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_httpie() {
echo -e "$amarelo Instalando HTTPie...$reset"
apt update
apt install -y httpie
echo -e "$verde HTTPie instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_tmux() {
echo -e "$amarelo Instalando Tmux...$reset"
apt update
apt install -y tmux
echo -e "$verde Tmux instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_screen() {
echo -e "$amarelo Instalando Screen...$reset"
apt update
apt install -y screen
echo -e "$verde Screen instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_ssh() {
echo -e "$amarelo Instalando SSH...$reset"
apt update
apt install -y openssh-server
systemctl start ssh
systemctl enable ssh
echo -e "$verde SSH instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_ftp() {
echo -e "$amarelo Instalando FTP...$reset"
apt update
apt install -y vsftpd
systemctl start vsftpd
systemctl enable vsftpd
echo -e "$verde FTP instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_sftp() {
echo -e "$amarelo Instalando SFTP...$reset"
apt update
apt install -y openssh-server
echo -e "$verde SFTP instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_rsync() {
echo -e "$amarelo Instalando Rsync...$reset"
apt update
apt install -y rsync
echo -e "$verde Rsync instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_cron() {
echo -e "$amarelo Instalando Cron...$reset"
apt update
apt install -y cron
systemctl start cron
systemctl enable cron
echo -e "$verde Cron instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_logrotate() {
echo -e "$amarelo Instalando Logrotate...$reset"
apt update
apt install -y logrotate
echo -e "$verde Logrotate instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_fail2ban() {
echo -e "$amarelo Instalando Fail2ban...$reset"
apt update
apt install -y fail2ban
systemctl start fail2ban
systemctl enable fail2ban
echo -e "$verde Fail2ban instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_ufw() {
echo -e "$amarelo Instalando UFW...$reset"
apt update
apt install -y ufw
ufw --force enable
echo -e "$verde UFW instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_iptables() {
echo -e "$amarelo Instalando Iptables...$reset"
apt update
apt install -y iptables
echo -e "$verde Iptables instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_openssl() {
echo -e "$amarelo Instalando OpenSSL...$reset"
apt update
apt install -y openssl
echo -e "$verde OpenSSL instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_certbot() {
echo -e "$amarelo Instalando Certbot...$reset"
apt update
apt install -y certbot python3-certbot-nginx
echo -e "$verde Certbot instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_letsencrypt() {
echo -e "$amarelo Instalando Let's Encrypt...$reset"
apt update
apt install -y certbot
echo -e "$verde Let's Encrypt instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_cloudflare() {
echo -e "$amarelo Instalando Cloudflare...$reset"
wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
dpkg -i cloudflared-linux-amd64.deb
rm cloudflared-linux-amd64.deb
echo -e "$verde Cloudflare instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_aws_cli() {
echo -e "$amarelo Instalando AWS CLI...$reset"
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
./aws/install
rm -rf aws awscliv2.zip
echo -e "$verde AWS CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_azure_cli() {
echo -e "$amarelo Instalando Azure CLI...$reset"
curl -sL https://aka.ms/InstallAzureCLIDeb | bash
echo -e "$verde Azure CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_google_cloud_cli() {
echo -e "$amarelo Instalando Google Cloud CLI...$reset"
curl https://sdk.cloud.google.com | bash
echo -e "$verde Google Cloud CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_digitalocean_cli() {
echo -e "$amarelo Instalando DigitalOcean CLI...$reset"
snap install doctl
echo -e "$verde DigitalOcean CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_linode_cli() {
echo -e "$amarelo Instalando Linode CLI...$reset"
pip3 install linode-cli
echo -e "$verde Linode CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_vultr_cli() {
echo -e "$amarelo Instalando Vultr CLI...$reset"
wget https://github.com/vultr/vultr-cli/releases/latest/download/vultr-cli_linux_64-bit.tar.gz
tar -xzf vultr-cli_linux_64-bit.tar.gz
mv vultr-cli /usr/local/bin/
rm vultr-cli_linux_64-bit.tar.gz
echo -e "$verde Vultr CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_heroku_cli() {
echo -e "$amarelo Instalando Heroku CLI...$reset"
curl https://cli-assets.heroku.com/install.sh | sh
echo -e "$verde Heroku CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_netlify_cli() {
echo -e "$amarelo Instalando Netlify CLI...$reset"
npm install -g netlify-cli
echo -e "$verde Netlify CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_vercel_cli() {
echo -e "$amarelo Instalando Vercel CLI...$reset"
npm install -g vercel
echo -e "$verde Vercel CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_surge_cli() {
echo -e "$amarelo Instalando Surge CLI...$reset"
npm install -g surge
echo -e "$verde Surge CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_now_cli() {
echo -e "$amarelo Instalando Now CLI...$reset"
npm install -g now
echo -e "$verde Now CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_zeit_cli() {
echo -e "$amarelo Instalando Zeit CLI...$reset"
npm install -g zeit
echo -e "$verde Zeit CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_firebase_cli() {
echo -e "$amarelo Instalando Firebase CLI...$reset"
npm install -g firebase-tools
echo -e "$verde Firebase CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_supabase_cli() {
echo -e "$amarelo Instalando Supabase CLI...$reset"
npm install -g supabase
echo -e "$verde Supabase CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_planetscale_cli() {
echo -e "$amarelo Instalando PlanetScale CLI...$reset"
npm install -g @planetscale/cli
echo -e "$verde PlanetScale CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_railway_cli() {
echo -e "$amarelo Instalando Railway CLI...$reset"
npm install -g @railway/cli
echo -e "$verde Railway CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_render_cli() {
echo -e "$amarelo Instalando Render CLI...$reset"
npm install -g @render/cli
echo -e "$verde Render CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_flyio_cli() {
echo -e "$amarelo Instalando Fly.io CLI...$reset"
curl -L https://fly.io/install.sh | sh
echo -e "$verde Fly.io CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_digitalocean_app_platform_cli() {
echo -e "$amarelo Instalando DigitalOcean App Platform CLI...$reset"
npm install -g @digitalocean/app-platform-cli
echo -e "$verde DigitalOcean App Platform CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_aws_amplify_cli() {
echo -e "$amarelo Instalando AWS Amplify CLI...$reset"
npm install -g @aws-amplify/cli
echo -e "$verde AWS Amplify CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_aws_sam_cli() {
echo -e "$amarelo Instalando AWS SAM CLI...$reset"
pip3 install aws-sam-cli
echo -e "$verde AWS SAM CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_aws_cdk_cli() {
echo -e "$amarelo Instalando AWS CDK CLI...$reset"
npm install -g aws-cdk
echo -e "$verde AWS CDK CLI instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_terraform() {
echo -e "$amarelo Instalando Terraform...$reset"
wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
unzip terraform_1.5.0_linux_amd64.zip
mv terraform /usr/local/bin/
rm terraform_1.5.0_linux_amd64.zip
echo -e "$verde Terraform instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_ansible() {
echo -e "$amarelo Instalando Ansible...$reset"
apt update
apt install -y ansible
echo -e "$verde Ansible instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_vagrant() {
echo -e "$amarelo Instalando Vagrant...$reset"
wget https://releases.hashicorp.com/vagrant/2.3.0/vagrant_2.3.0_linux_amd64.zip
unzip vagrant_2.3.0_linux_amd64.zip
mv vagrant /usr/local/bin/
rm vagrant_2.3.0_linux_amd64.zip
echo -e "$verde Vagrant instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_virtualbox() {
echo -e "$amarelo Instalando VirtualBox...$reset"
apt update
apt install -y virtualbox
echo -e "$verde VirtualBox instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_vmware() {
echo -e "$amarelo Instalando VMware...$reset"
wget https://download3.vmware.com/software/WKST-1700-LX/VMware-Workstation-Full-17.0.0-20800274.x86_64.bundle
chmod +x VMware-Workstation-Full-17.0.0-20800274.x86_64.bundle
./VMware-Workstation-Full-17.0.0-20800274.x86_64.bundle
echo -e "$verde VMware instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_qemu() {
echo -e "$amarelo Instalando QEMU...$reset"
apt update
apt install -y qemu qemu-kvm
echo -e "$verde QEMU instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_kvm() {
echo -e "$amarelo Instalando KVM...$reset"
apt update
apt install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
usermod -aG libvirt $USER
echo -e "$verde KVM instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_docker_swarm() {
echo -e "$amarelo Instalando Docker Swarm...$reset"
docker swarm init
echo -e "$verde Docker Swarm instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_kubernetes() {
echo -e "$amarelo Instalando Kubernetes...$reset"
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
apt update
apt install -y kubelet kubeadm kubectl
echo -e "$verde Kubernetes instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_helm() {
echo -e "$amarelo Instalando Helm...$reset"
curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
echo -e "$verde Helm instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

instalar_istio() {
echo -e "$amarelo Instalando Istio...$reset"
curl -L https://istio.io/downloadIstio | sh -
mv istio-*/bin/istioctl /usr/local/bin/
echo -e "$verde Istio instalado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

atualizar_sistema() {
echo -e "$amarelo Atualizando sistema...$reset"
apt update && apt upgrade -y
echo -e "$verde Sistema atualizado com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

limpar_sistema() {
echo -e "$amarelo Limpando sistema...$reset"
apt autoremove -y && apt autoclean
echo -e "$verde Sistema limpo com sucesso!$reset"
read -p "Pressione Enter para continuar..."
}

reiniciar_sistema() {
echo -e "$amarelo Reiniciando sistema...$reset"
reboot
}

desligar_sistema() {
echo -e "$amarelo Desligando sistema...$reset"
shutdown -h now
}

# Função para instalar WireGuard (Opção 87)
instalar_wireguard() {
cabecalho
echo -e "$amarelo Instalação do WireGuard VPN$reset"
echo ""

# Verificar se Docker está instalado
if ! command -v docker &> /dev/null; then
    echo -e "$vermelho Docker não está instalado! Instalando Docker primeiro...$reset"
    echo ""
    # Instalar Docker
    apt update
    apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt update
    apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    systemctl start docker
    systemctl enable docker
    echo -e "$verde Docker instalado com sucesso!$reset"
    echo ""
fi

# Verificar se Docker Compose está disponível
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    echo -e "$amarelo Instalando Docker Compose...$reset"
    apt install -y docker-compose
    echo -e "$verde Docker Compose instalado!$reset"
    echo ""
fi

# Verificar se Traefik já existe
if docker network ls | grep -q "traefik"; then
    echo -e "$verde Traefik já está configurado! Usando rede existente.$reset"
    TRAEFIK_NETWORK="traefik"
else
    echo -e "$amarelo Criando rede do Traefik...$reset"
    docker network create traefik
    TRAEFIK_NETWORK="traefik"
fi

# Pedir apenas o domínio
echo -e "$amarelo Digite seu domínio (exemplo: meudominio.com):$reset"
read -p "Domínio: " DOMINIO
echo ""

# Montar subdomínio automaticamente
SUBDOMINIO="vpn.${DOMINIO}"

echo -e "$amarelo Instalando WireGuard VPN...$reset"
echo ""

# Criar diretório para o WireGuard
mkdir -p /opt/wireguard
cd /opt/wireguard

# Criar docker-compose.yml para WireGuard com Traefik
cat > docker-compose.yml << EOF
version: '3.8'

services:
  wireguard:
    image: linuxserver/wireguard:latest
    container_name: wireguard
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Sao_Paulo
      - SERVERURL=${SUBDOMINIO}
      - SERVERPORT=80
      - PEERS=1
      - PEERDNS=auto
      - INTERNAL_SUBNET=10.0.0.0
    volumes:
      - wireguard-config:/config
      - /lib/modules:/lib/modules:ro
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      - ${TRAEFIK_NETWORK}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wireguard.rule=Host(\`${SUBDOMINIO}\`)"
      - "traefik.http.routers.wireguard.tls=true"
      - "traefik.http.routers.wireguard.tls.certresolver=letsencrypt"
      - "traefik.http.services.wireguard.loadbalancer.server.port=80"

volumes:
  wireguard-config:

networks:
  ${TRAEFIK_NETWORK}:
    external: true
EOF

# Iniciar o WireGuard
echo -e "$amarelo Iniciando containers...$reset"
if command -v docker-compose &> /dev/null; then
    docker-compose up -d
    COMPOSE_EXIT_CODE=$?
else
    docker compose up -d
    COMPOSE_EXIT_CODE=$?
fi

# Verificar se a instalação foi bem-sucedida
if [ $COMPOSE_EXIT_CODE -eq 0 ]; then
    # Aguardar containers iniciarem
    sleep 10
    
    # Verificar se containers estão rodando
    if docker ps | grep -q "wireguard"; then
        echo ""
        echo -e "$verde WireGuard VPN instalado com sucesso!$reset"
        echo -e "$amarelo Acesse: https://${SUBDOMINIO}$reset"
        echo ""
        echo -e "$amarelo Configuração do cliente:$reset"
        echo -e "$branco 1. Baixe o arquivo de configuração do cliente em: /opt/wireguard/wireguard-config/peer1/peer1.conf$reset"
        echo -e "$branco 2. Importe o arquivo no seu cliente WireGuard$reset"
        echo -e "$branco 3. Conecte-se à VPN usando: https://${SUBDOMINIO}$reset"
        echo ""
        echo -e "$amarelo QR Code para configuração móvel:$reset"
        echo -e "$branco Execute: docker exec wireguard /app/show-peer 1$reset"
        echo ""
    else
        echo -e "$vermelho Erro: Container não iniciou corretamente!$reset"
        echo -e "$amarelo Removendo instalação...$reset"
        docker-compose down -v 2>/dev/null || docker compose down -v 2>/dev/null
        rm -rf /opt/wireguard
        echo -e "$vermelho Instalação removida devido a erros.$reset"
    fi
else
    echo -e "$vermelho Erro na instalação do WireGuard!$reset"
    echo -e "$amarelo Removendo instalação...$reset"
    docker-compose down -v 2>/dev/null || docker compose down -v 2>/dev/null
    rm -rf /opt/wireguard
    echo -e "$vermelho Instalação removida devido a erros.$reset"
fi

echo ""
read -p "Pressione Enter para continuar..."
}

sair() {
echo -e "$verde Saindo...$reset"
exit 0
}

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
## RM CLIQUE ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

# Iniciar o menu principal
menu_principal
